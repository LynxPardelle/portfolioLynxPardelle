# =============================================================================
# Example Environment Configuration for Node.js Application
# =============================================================================
# Copy this file to .env and customize the values for your specific needs
# =============================================================================

# Application Configuration
NODE_ENV=development

# Port Configuration
DEV_PORT=6164
PROD_PORT=6165
NGINX_PORT=80

# Database Configuration
MONGO_PORT=27017
MONGO_ROOT_USERNAME=root
MONGO_ROOT_PASSWORD=change_me
MONGO_APP_DB=lynx_portfolio
MONGO_APP_TEST_DB=lynx_portfolio_test
MONGO_APP_USER=database_user
MONGO_APP_PASSWORD=portfolio_pass
MONGO_AUTH_SOURCE=admin
MONGO_URI=mongodb://${MONGO_APP_USER}:${MONGO_APP_PASSWORD}@localhost:${MONGO_PORT}/${MONGO_APP_DB}?authSource=${MONGO_AUTH_SOURCE}
# For Docker Compose the service name is 'mongo', override when running containers. When using
# an application user, include authSource (defaults to admin) if you specify a DB name in the URI:
# MONGO_URI=mongodb://${MONGO_APP_USER}:${MONGO_APP_PASSWORD}@mongo:${MONGO_PORT}/${MONGO_APP_DB}?authSource=${MONGO_AUTH_SOURCE}
# MongoDB backup: All data is stored in the 'mongo_data' Docker volume. To access for backup/restore:
# docker run --rm -v lynx-portfolio-back_mongo_data:/data/db -v $(pwd):/backup mongo:7.0 bash -c 'mongodump --host mongo --port ${MONGO_PORT} --out /backup/dump'
REDIS_URL=redis://localhost:6379

# Restoration toggle (set to 'false' to skip restoration on init)
MONGO_RESTORE_ON_INIT=true

# Authentication & Security
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
# WARNING: Change all secrets and passwords for production deployments!
JWT_EXPIRES_IN=24h
CORS_ORIGIN=http://lynxpardelle.com,https://www.lynxpardelle.com

# Nginx Configuration
NGINX_HOST=localhost
NGINX_WORKER_PROCESSES=auto

# Rate Limiting (nginx)
RATE_LIMIT_API=10r/s
RATE_LIMIT_LOGIN=1r/s
RATE_LIMIT_GLOBAL=30r/s

# Performance Settings
NODE_OPTIONS=--max-old-space-size=2048
UV_THREADPOOL_SIZE=4

# User Configuration (for Docker)
UID=1000
GID=1000

# Docker Build Settings
DOCKER_BUILDKIT=1
COMPOSE_DOCKER_CLI_BUILD=1

# Logging Configuration
LOG_LEVEL=info
LOG_FORMAT=combined

# Cache Settings
NPM_CONFIG_CACHE=.npm
NPM_CONFIG_PREFER_OFFLINE=true
NPM_CONFIG_AUDIT=false
NPM_CONFIG_FUND=false

# Development Settings (only for development)
CHOKIDAR_USEPOLLING=false
CHOKIDAR_INTERVAL=1000

# API Configuration
API_PREFIX=/api
API_VERSION=v1
API_RATE_LIMIT=100

# =============================================================================
# File Upload Configuration (S3-Only Mode)
# =============================================================================
# Upload limits (applied to S3 uploads)
UPLOAD_MAX_SIZE=10mb
# Note: UPLOAD_DEST removed - all files stored in S3

# =============================================================================
# S3-Only Storage Configuration (Migration Complete)
# =============================================================================
# Note: Feature flags removed - application now runs in S3-only mode
# Local filesystem support has been completely removed

# =============================================================================
# S3 Storage Configuration (Primary File Storage)
# =============================================================================
# REQUIRED: S3 bucket for all file uploads and assets
S3_BUCKET_NAME=your-s3-bucket
S3_REGION=us-east-1

# REQUIRED: AWS credentials (for development/testing only)
# WARNING: In production, use IAM roles instead of access keys
S3_ACCESS_KEY_ID=your-access-key
S3_SECRET_ACCESS_KEY=your-secret-key

# S3 endpoint and configuration
S3_ENDPOINT=https://s3.amazonaws.com
S3_UPLOAD_PREFIX=uploads/

# OPTIONAL: KMS encryption key for S3 objects (recommended for production)
S3_KMS_KEY_ARN=arn:aws:kms:your-region:your-account-id:key/your-kms-key-id

# =============================================================================
# CloudFront CDN Configuration (Content Delivery)
# =============================================================================
# REQUIRED: CloudFront domain for asset delivery
CLOUDFRONT_DOMAIN=your.domain.com

# REQUIRED: Distribution ID for cache invalidations
CLOUDFRONT_DISTRIBUTION_ID=yourdistributionid

# =============================================================================
# AWS IAM Configuration (Production Security)  
# =============================================================================
# OPTIONAL: IAM role to assume for enhanced security (recommended for production)
AWS_ROLE=your-iam-role
AWS_ID=your-aws-account-id
AWS_ROLE_TO_ASSUME=arn:aws:iam::${AWS_ID}:role/${AWS_ROLE}

# =============================================================================
# File Organization Structure
# =============================================================================
# Files are organized as: uploads/albums/, uploads/articles/, uploads/main/, etc.
# MongoDB backups are stored separately in: backups/
# Automated backup config
MONGO_BACKUP_CRON=0 3 * * 0
# Example: every Sunday at 3am
MONGO_BACKUP_KEEP=4
# Number of weekly backups to keep in S3

# S3 File Upload Migration
# -------------------------
# IMPORTANT: After updating dependencies, run: npm install
# The application now uses S3 for file storage instead of local uploads/ directory.
# Files are automatically uploaded to S3 and served from there.
# The getFile endpoint now redirects to S3 URLs for better performance.
# Old local files will still be served for backwards compatibility.

# MongoDB Backup/Restore Scripts Usage
# ------------------------------------
# Prerequisites: awscli, mongodump, mongorestore must be installed and available in PATH.
# To backup MongoDB and upload to S3:
#   bash scripts/backup_mongo_to_s3.sh
# To restore MongoDB from the latest backup in S3:
#   bash scripts/restore_mongo_from_s3.sh
# To automate weekly backups, use scripts/weekly_backup_cron.sh in a cron job.
# Backups are stored in mongo_backups/ and uploaded to S3 if S3 config is set.

# Email Configuration (if needed)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASS=your-app-password

# External API Keys (if needed)
# EXTERNAL_API_KEY=your-api-key
# EXTERNAL_API_URL=https://api.example.com

# Health Check Configuration
HEALTH_CHECK_TIMEOUT=10000
HEALTH_CHECK_INTERVAL=30000

# Production Optimization Settings
# CLUSTER_WORKERS=max
# PM2_INSTANCES=max
# PM2_MAX_MEMORY_RESTART=500M

# MongoDB Connection Retry (optional tuning)
# MONGO_MAX_RETRIES=10
# MONGO_RETRY_DELAY_MS=3000
