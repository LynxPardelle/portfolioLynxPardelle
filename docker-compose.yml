# =============================================================================
# Docker Compose Configuration for Node.js Template
# =============================================================================
# This compose file provides multiple deployment profiles:
# - create: Project creation and initialization
# - dev: Development environment with hot-reload
# - prod: Production environment
# - prod-pm2: Production with PM2 process manager
# - nginx: Nginx reverse proxy only
# - prod-nginx: Production with nginx reverse proxy
# - test: Testing environment
# =============================================================================

name: lynx-portfolio-back

# Define reusable configuration
x-common-variables: &common-variables
  UID: ${UID:-1000}
  GID: ${GID:-1000}
  NODE_ENV: ${NODE_ENV:-development}

x-common-env: &common-env
  NODE_ENV: ${NODE_ENV:-development}
  CORS_ORIGIN: ${CORS_ORIGIN:-*}
  JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
  NGINX_HOST: ${NGINX_HOST:-localhost}
  NGINX_PORT: ${NGINX_PORT:-80}
  REDIS_URL: ${REDIS_URL:-}
  MONGO_APP_DB: ${MONGO_APP_DB:-lynx_portfolio}
  MONGO_APP_TEST_DB: ${MONGO_APP_TEST_DB:-lynx_portfolio_test}
  MONGO_APP_USER: ${MONGO_APP_USER:-portfolio}
  MONGO_APP_PASSWORD: ${MONGO_APP_PASSWORD:-portfolio_pass}
  MONGO_AUTH_SOURCE: ${MONGO_AUTH_SOURCE:-admin}

services:
  mongo-backup:
    build:
      context: .
      dockerfile: Dockerfile.mongo-backup
    container_name: lynx-portfolio-back-mongo-backup
    depends_on:
      - mongo
    environment:
      MONGO_HOST: mongo
      MONGO_PORT: ${MONGO_PORT:-27519}
      MONGO_DB: ${MONGO_APP_DB:-lynx_portfolio}
      MONGO_USER: ${MONGO_APP_USER:-portfolio}
      MONGO_PASS: ${MONGO_APP_PASSWORD:-portfolio_pass}
      S3_BUCKET: ${S3_BUCKET_NAME}
      S3_PATH: backups
      S3_ENDPOINT: ${S3_ENDPOINT}
      AWS_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${S3_REGION}
      TZ: UTC
    volumes:
      - mongo_data:/data/db:ro
      - ./scripts:/scripts:ro
      - ./mongo_backups:/mongo_backups
    healthcheck:
        # Security: Enforce strong passwords in production
        # Set MONGO_INITDB_ROOT_PASSWORD and MONGO_APP_PASSWORD to long, random values
        # Optionally set MONGO_TLS_MODE and MONGO_TLS_CERT/KEY for SSL
      test: ["CMD", "bash", "-c", "ls /mongo_backups/mongo_backup_*.gz 2>/dev/null | tail -n 1"]
      interval: 2m
      timeout: 10s
      retries: 3
      start_period: 3m
    restart: unless-stopped
    profiles: ["backup"]
  mongo:
    build:
      context: .
      dockerfile: Dockerfile.mongo
    image: lynx-portfolio-back-mongo-initialized:latest
    container_name: lynx-portfolio-back-mongo
    ports:
      - "${MONGO_PORT:-27519}:27519"
    environment:
      MONGO_PORT: ${MONGO_PORT:-27519}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_APP_DB: ${MONGO_APP_DB}
      MONGO_APP_TEST_DB: ${MONGO_APP_TEST_DB}
      MONGO_APP_USER: ${MONGO_APP_USER}
      MONGO_APP_PASSWORD: ${MONGO_APP_PASSWORD}
      MONGO_RESTORE_ON_INIT: ${MONGO_RESTORE_ON_INIT:-true}
    command: ["--bind_ip_all", "--port", "27519", "--wiredTigerCacheSizeGB=1"]
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27519", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 25s
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped

  dev:
    build:
      context: .
      target: development
      args:
        <<: *common-variables
        NODE_ENV: development
    container_name: lynx-portfolio-back-dev
    depends_on:
      - mongo
    ports:
      - "${DEV_PORT}:${DEV_PORT}"
    environment:
      <<: *common-env
      MONGO_URI: ${MONGO_URI}
      CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-false}
    volumes:
      # Mount source code for hot-reload (excludes node_modules for performance)
      - .:/app:cached
      - /app/node_modules
      - node_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DEV_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Restart policy
    restart: unless-stopped
    profiles: ["dev"]

  prod:
    build:
      context: .
      target: production
      args:
        <<: *common-variables
        NODE_ENV: production
      cache_from:
        # To run weekly backup: docker compose --profile backup up mongo-backup
        - node:22-alpine
    container_name: lynx-portfolio-back-prod
    depends_on:
      - mongo
    ports:
      - "${PROD_PORT}:${PROD_PORT}"
    environment:
      <<: *common-env
      NODE_ENV: production
      MONGO_URI: ${MONGO_URI}
    volumes:
      - node_logs:/app/logs
      - node_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PROD_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Restart policy for production
    restart: unless-stopped
    profiles: ["prod"]

  # Production service with PM2
  prod-pm2:
    build:
      context: .
      target: production-pm2
      args:
        <<: *common-variables
        NODE_ENV: production
    container_name: lynx-portfolio-back-prod-pm2
    depends_on:
      - mongo
    ports:
      - "${PROD_PORT}:${PROD_PORT}"
    environment:
      <<: *common-env
      NODE_ENV: production
      MONGO_URI: ${MONGO_URI}
    volumes:
      - node_logs:/app/logs
      - node_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PROD_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles: ["prod-pm2"]

  # Testing service
  test:
    build:
      context: .
      target: testing
      args:
        <<: *common-variables
        NODE_ENV: test
    container_name: lynx-portfolio-back-test
    depends_on:
      - mongo
    environment:
      <<: *common-env
      NODE_ENV: test
      CI: "true"
      MONGO_URI: ${MONGO_URI}
    volumes:
      - .:/app:cached
      - /app/node_modules
    profiles: ["test"]

  # Backend app service for nginx proxy
  app:
    build:
      context: .
      target: production
      args:
        <<: *common-variables
        NODE_ENV: production
    container_name: lynx-portfolio-back-app
    depends_on:
      - mongo
    expose:
      - "6165"
    environment:
      <<: *common-env
      NODE_ENV: production
      MONGO_URI: ${MONGO_URI}
    volumes:
      - node_logs:/app/logs
      - node_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DEV_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles: ["nginx"]

  # Nginx reverse proxy service (standalone)
  nginx:
    build:
      context: .
      target: nginx
    container_name: lynx-portfolio-back-nginx
    depends_on:
      - app
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    environment:
      NGINX_HOST: ${NGINX_HOST}
      NGINX_PORT: ${NGINX_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles: ["nginx"]

  # Production service with integrated nginx
  prod-nginx:
    build:
      context: .
      target: production-nginx
      args:
        <<: *common-variables
        NODE_ENV: production
    container_name: lynx-portfolio-back-prod-nginx
    depends_on:
      - mongo
    ports:
      - "${NGINX_PORT}:80"
    environment:
      <<: *common-env
      NODE_ENV: production
      MONGO_URI: ${MONGO_URI}
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - node_logs:/app/logs
      - node_uploads:/app/uploads
      - nginx_logs:/var/log/nginx
      - supervisor_logs:/var/log/supervisor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    profiles: ["prod-nginx"]

# Named volumes for better performance and persistence
volumes:
  # Logs volume for persistent logging
  node_logs:
    driver: local
  
  # Uploads volume for file uploads
  node_uploads:
    driver: local
  
  # Nginx logs volume
  nginx_logs:
    driver: local
  
  # Supervisor logs volume (for prod-nginx)
  supervisor_logs:
    driver: local

  # MongoDB data volume
  mongo_data:
    driver: local

# Network configuration (optional - Docker creates default network)
networks:
  default:
    external: true
    name: lynx-portfolio-back-network
